#!/bin/bash
set -eu

# local functions
function _exists() {
  # check if a command exists
  # input:
  #   cmd
  type $1 &>/dev/null
}

function _require() {
  # return 1 if a commnad does not exist
  # input:
  #   cmd1 [cmd2...]
  local cmd
  local result=0
  for cmd in $*; do
    if ! _exists $cmd; then
      echo "E: not found $cmd!" >&2
      result=1
    fi
  done
  return $result
}

function _ask() {
  # ask a question and read answer from stdin
  # input:
  #   question
  # output:
  #   yes ? 0 : 1
  local answer
  read -p "$1 [y/N]" answer
  case $answer in
    [yY]*)
      return 0
      ;;
    *)
      return 1
      ;;
  esac
}

# main functions
function clone_config() {
  _require git

  # default
  local install_dir=$HOME/.local/repo/config
  if [ ! -e $install_dir ]; then
    mkdir -p $install_dir
  fi

  git clone https://github.com/kazhr/config $install_dir/
}

function _install_pyenv() {

  PYENV_ROOT=$HOME/.pyenv
  export PYENV_ROOT
  export PATH=$PATH:$PYENV_ROOT/bin

  # skip if already exists
  _exists pyenv && return 0

  # skip if no
  _ask "Do you want to install pyenv?" || return 0

  case $OSTYPE in
    darwin*)
      _require brew
      brew install pyenv
      ln -sf /usr/local/opt/pyenv $PYENV_ROOT
      ;;

    linux*)
      _require curl
      (cd && curl https://pyenv.run | bash)
      ;;

    *)
      echo "E: unknown OSTYPE($OSTYPE)!" >&2
      return 1
      ;;
  esac
}

function setup_conda() {

  _install_pyenv
  eval "$(pyenv init -)"

  conda3='miniconda3-latest'
  if [ ! -d $PYENV_ROOT/versions/$conda3 ]; then
    pyenv install $conda3
  fi

  #conda2='miniconda2-latest'
  #if [ ! -d $PYENV_ROOT/versions/$conda2 ]; then
  #  pyenv install $conda2
  #fi
}

function _install_rbenv() {
  RBENV_ROOT=$HOME/.rbenv
  export RBENV_ROOT
  export PATH=$PATH:$RBENV_ROOT/bin

  # skip if already exsits
  _exists rbenv && return 0

  # skip if no
  _ask "Do you want to install rbenv?" || return 0

  git clone https://github.com/sstephenson/rbenv.git $RBENV_ROOT
  git clone https://github.com/sstephenson/ruby-build.git $RBENV_ROOT/plugins/ruby-build
}

function install_ruby() {
  _install_rbenv
  eval "$(rbenv init -)"

  local ruby_version=2.7.3
  if [[ $(cat $RBENV_ROOT/version) != "$ruby_version" ]]; then
    rbenv install $ruby_version
    rbenv global $ruby_version
  fi
}

function install_serverspec() {
  _require bundle

  cat >./Gemfile <<-EOT
	source "https://rubygems.org"
	
	gem 'serverspec'
	gem 'rake'
	gem 'highline'
	EOT

  bundle install
  bundle exec serverspec-init
}

function _install_fzf() {

  # skip if already exists
  [ -d ~/.fzf ] && return 0

  # skip if no
  _ask "Do you want to install fzf?" || return 0

  case $OSTYPE in
    darwin*)
      _require brew
      brew install fzf
      ;;

    linux*)
      _require git
      git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
      printf "y\ny\nn\n"| ~/.fzf/install
      ;;

    *)
      echo "E: unknown OSTYPE($OSTYPE)!" >&2
      return 1
      ;;
  esac
}

function setup_dotfiles() {

  REPO_DIR=$(git rev-parse --show-toplevel)
  ln -sf $REPO_DIR/dotfiles/environment $HOME/.bash_profile
  ln -sf $REPO_DIR/dotfiles/bashrc $HOME/.bashrc
  ln -sf $REPO_DIR/dotfiles/aliases $HOME/.aliases

  if [ ! -d $HOME/.nord-dircolors ]; then
    _require git
    git clone https://github.com/arcticicestudio/nord-dircolors.git $HOME/.nord-dircolors
  fi
  ln -sf $HOME/.nord-dircolors/src/dir_colors $HOME/.dir_colors

  if _exists vim; then
    ln -sf $REPO_DIR/dotfiles/vimrc $HOME/.vimrc
  fi
}

function setup_zsh() {
  _require zsh git curl

  REPO_DIR=$(git rev-parse --show-toplevel)
  ln -sf $REPO_DIR/dotfiles/environment $HOME/.zshenv
  ln -sf $REPO_DIR/dotfiles/zshrc       $HOME/.zshrc

  if [ ! -d $HOME/.enhancd ]; then
    git clone https://github.com/b4b4r07/enhancd $HOME/.enhancd
  fi

  if [ ! -f $HOME/.csa.zsh ]; then
    curl https://raw.githubusercontent.com/uasi/zsh-context-sensitive-alias/master/csa.zsh -o $HOME/.csa.zsh
  fi

  _install_fzf
}

function _install_nvim() {

  _exists nvim && return 0

  # for Ubuntu/Debian
  echo "if false, see:"
  echo "  https://github.com/neovim/neovim/wiki/Building-Neovim#build-prerequisites"
  if _exists apt; then
    sudo apt -y install git ninja-build gettext libtool libtool-bin autoconf automake cmake g++ pkg-config unzip
  elif _exists yum; then
    sudo yum -y install git ninja-build libtool autoconf automake cmake gcc gcc-c++ make pkgconfig unzip patch
  else
    echo "E: not supported." >&2
    return 1
  fi

  local install_dir=/opt/neovim
  if [ ! -d $install_dir ]; then
    sudo git clone https://github.com/neovim/neovim.git $install_dir/
  fi

  # from source
  function _make_install() {
    sudo git checkout stable
    sudo make CMAKE_BUILD_TYPE=Release
    sudo make install
  }
  (cd $install_dir && _make_install)
}

function setup_nvim() {

  _install_nvim

  if [ ! -d ~/.config/nvim ]; then
    mkdir -p ~/.config/nvim
  fi
  REPO_DIR=$(git rev-parse --show-toplevel)
  ln -sf $REPO_DIR/nvim/init.vim ~/.config/nvim/init.vim
  ln -sf $REPO_DIR/nvim/dein.vim ~/.config/nvim/dein.vim
  ln -sf $REPO_DIR/nvim/dein.toml ~/.config/nvim/dein.toml
  ln -sf $REPO_DIR/nvim/python.toml ~/.config/nvim/python.toml
  if [ ! -e ~/.config/nvim/templates ]; then
    ln -sf $REPO_DIR/nvim/templates ~/.config/nvim/templates
  fi

  setup_conda
  export PYENV_VERSION='miniconda3-latest'
  echo "let g:python3_host_prog = '$(pyenv which python)'" > ~/.config/nvim/python.vim

  for pkg in neovim flake8; do
    if ! python -c "import $pkg" &>/dev/null; then
      python -m pip install $pkg
    fi
  done

  #export PYENV_VERSION='miniconda2-latest'
  #echo "let g:python_host_prog = '$(pyenv which python)'" >> ~/.config/nvim/python.vim

  #for pkg in neovim; do
  #  if ! python -c "import $pkg" &>/dev/null; then
  #    python -m pip install $pkg
  #  fi
  #done
}

function install_docker() {

  _exists docker && return 0

  function _install_to_debian() {
    # for debian/ubuntu distribution

    local distribution
    case $(lsb_release -sd) in
      Ubuntu*)
        distribution=ubuntu
        ;;
      Debian*)
        distribution=debian
        ;;
      *)
        echo "E: not supported." >&2
        return 1
        ;;
    esac

    sudo apt install curl apt-transport-https ca-certificates software-properties-common
    curl -fsSL https://download.docker.com/linux/$distribution/gpg| sudo apt-key add -
    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/$distribution $(lsb_release -cs) stable"
    sudo apt update && sudo apt install -y docker-ce
  }

  function _install_to_centos() {
    # for centos distribution
    sudo yum install -y yum-utils device-mapper-persistent-data lvm2
    sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    sudo yum -y install docker-ce
  }

  if _exists apt; then
    _install_to_debian

  elif _exists yum; then
    _install_to_centos

  else
    echo "E: not supported." >&2
    return 1
  fi
}

function install_docker_compose() {

  _exists docker-compose && return 0

  # get the latest version
  local version=$(curl -w "%{redirect_url}" -s -o /dev/null https://github.com/docker/compose/releases/latest| awk -F/ '{print $NF}')
  local url="https://github.com/docker/compose/releases/download/$version/docker-compose-$(uname -s)-$(uname -m)"

  sudo curl -L $url -o /usr/local/bin/docker-compose
  sudo chmod +x /usr/local/bin/docker-compose
}

function install_awscli() {

  _require curl unzip

  local url="https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
  local zipfile=$(basename $url)

  curl $url -o $zipfile
  unzip $zipfile -d ./src && rm -f $zipfile
  # sudo ./src/aws/install
}

function install_npm() {

  _exists npm && return 0

  function _install_in_debian() {
    sudo apt install -y nodejs npm
  }

  if _exists apt; then
    _install_in_debian

  else
    echo "E: not supported yet!" &>2
    return 1
  fi
}

function install_ansible() {
  # for ubuntu20
  sudo apt install software-properties-common
  sudo apt-add-repository --yes --update ppa:ansible/ansible
  sudo apt update
  sudo apt install ansible
  python -m pip install ansible
}

function setup_json-server() {

  install_npm

  local install_dir="$HOME/.json-server"
  if [ -e $install_dir ]; then
    return 0
  fi

  function _setup() {
    npm init -y
    npm i -D json-server
  }

  mkdir $install_dir
  (cd $install_dir && _setup)
}

# main
if [ $# -eq 0 ]; then
   # get the current dname
  target=$(git rev-parse --show-prefix| tr -d '/\n')
else
  target=$1
fi

case $target in
  config)
    clone_config
    ;;
  dotfiles)
    setup_dotfiles
    setup_zsh
    ;;
  conda)
    setup_conda
    ;;
  nvim)
    setup_nvim
    ;;
  docker)
    install_docker
    install_docker_compose
    ;;
  aws)
    install_awscli
    ;;
  serverspec)
    install_ruby
    install_serverspec
    ;;
esac
