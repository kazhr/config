#!/bin/bash
set -u

# environment
REPO_DIR=$(git rev-parse --show-toplevel)
PYENV_ROOT=$HOME/.pyenv

export PYENV_ROOT
export PATH=$PATH:$PYENV_ROOT/bin

# local functions
function _exists() {
  # check if a command exists
  # input:
  #   cmd
  type $1 &>/dev/null
}

function _require() {
  # return 1 if a commnad does not exist
  # input:
  #   cmd1 [cmd2...]
  local cmd
  local result=0
  for cmd in $*; do
    if ! _exists $cmd; then
      echo "E: not found $cmd!" >&2
      result=1
    fi
  done
  return $result
}

function _ask() {
  # ask a question and read answer from stdin
  # input:
  #   question
  # output:
  #   yes ? 0 : 1
  local answer
  read -p "$1 [y/N]" answer
  case $answer in
    [yY]*)
      return 0
      ;;
    *)
      return 1
      ;;
  esac
}

# main functions
function install_pyenv() {

  # skip if already exists
  _exists pyenv && return 0

  # skip if no
  _ask "Do you want to install pyenv?" || return 0

  case $OSTYPE in
    darwin*)
      _require brew
      brew install pyenv
      ln -sf /usr/local/opt/pyenv $PYENV_ROOT
      ;;

    linux*)
      _require curl
      (cd && curl https://pyenv.run | bash)
      ;;

    *)
      echo "E: unknown OSTYPE($OSTYPE)!" >&2
      return 1
      ;;
  esac
}

function install_conda() {

  _require pyenv
  eval "$(pyenv init -)"

  conda3='miniconda3-latest'
  if [ ! -d $PYENV_ROOT/versions/$conda3 ]; then
    pyenv install $conda3
  fi

  conda2='miniconda2-latest'
  if [ ! -d $PYENV_ROOT/versions/$conda2 ]; then
    pyenv install $conda2
  fi
}

function _install_fzf() {

  # skip if already exists
  [ -d ~/.fzf ] && return 0

  # skip if no
  _ask "Do you want to install fzf?" || return 0

  case $OSTYPE in
    darwin*)
      _require brew
      brew install fzf
      ;;

    linux*)
      _require git
      git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
      printf "y\ny\nn\n"| ~/.fzf/install
      ;;

    *)
      echo "E: unknown OSTYPE($OSTYPE)!" >&2
      return 1
      ;;
  esac
}

function setup_dotfiles() {

  ln -sf $REPO_DIR/dotfiles/environment $HOME/.bash_profile
  ln -sf $REPO_DIR/dotfiles/bashrc $HOME/.bashrc
  ln -sf $REPO_DIR/dotfiles/aliases $HOME/.aliases

  if [ ! -d $HOME/.nord-dircolors ]; then
    _require git
    git clone https://github.com/arcticicestudio/nord-dircolors.git $HOME/.nord-dircolors
  fi
  ln -sf $HOME/.nord-dircolors/src/dir_colors $HOME/.dir_colors

  if _exists vim; then
    ln -sf $REPO_DIR/dotfiles/vimrc $HOME/.vimrc
  fi
}

function setup_zsh() {
  _require zsh git curl

  ln -sf $REPO_DIR/dotfiles/environment $HOME/.zshenv
  ln -sf $REPO_DIR/dotfiles/zshrc       $HOME/.zshrc

  if [ ! -d $HOME/.enhancd ]; then
    git clone https://github.com/b4b4r07/enhancd $HOME/.enhancd
  fi

  if [ ! -f $HOME/.csa.zsh ]; then
    curl https://raw.githubusercontent.com/uasi/zsh-context-sensitive-alias/master/csa.zsh -o $HOME/.csa.zsh
  fi

  _install_fzf
}

function install_nvim() {
  # from source

  _exists nvim && return 0

  # for Ubuntu/Debian
  echo "if false, see:"
  echo "  https://github.com/neovim/neovim/wiki/Building-Neovim#build-prerequisites"
  _require ninja gettext libtool libtool-bin autoconf automake cmake g++ pkg-config unzip

  _require git

  local install_dir=/opt/neovim
  if [ ! -d $install_dir ]; then
    sudo git https://github.com/neovim/neovim.git $install_dir
  fi

  function _make_install() {
    sudo git checkout stable
    sudo make CMAKE_BUILD_TYPE=Release
    sudo make install
  }
  (cd $install_dir && _make_install)
}

function setup_nvim() {

  # skip if not exists
  _exists nvim || return 0

  if [ ! -d ~/.config/nvim ]; then
    mkdir -p ~/.config/nvim
  fi
  ln -sf $REPO_DIR/nvim/init.vim ~/.config/nvim/init.vim
  ln -sf $REPO_DIR/nvim/dein.vim ~/.config/nvim/dein.vim
  ln -sf $REPO_DIR/nvim/dein.toml ~/.config/nvim/dein.toml
  ln -sf $REPO_DIR/nvim/python.toml ~/.config/nvim/python.toml

  install_conda
  export PYENV_VERSION='miniconda3-latest'
  echo "let g:python3_host_prog = '$(pyenv which python)'" > ~/.config/nvim/python.vim

  for pkg in neovim flake8; do
    if ! python -c "import $pkg" &>/dev/null; then
      pip install $pkg
    fi
  done

  export PYENV_VERSION='miniconda2-latest'
  echo "let g:python_host_prog = '$(pyenv which python)'" >> ~/.config/nvim/python.vim

  for pkg in neovim; do
    if ! python -c "import $pkg" &>/dev/null; then
      pip install $pkg
    fi
  done
}


# get the current dname
dname=$(git rev-parse --show-prefix| tr -d '/\n')

# main
case $dname in
  dotfiles)
    setup_dotfiles
    setup_zsh
    install_fzf
    ;;
  nvim)
    install_pyenv
    install_conda
    install_nvim
    setup_nvim
    ;;
esac
